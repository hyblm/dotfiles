#+TITLE: Simple Emacs Config
#+Property: header-args:emacs-lisp :tangle ./init.el

* UI Configuration
#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        visible-bell t
        use-dialog-box nil)

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (global-display-line-numbers-mode 1)
  (hl-line-mode 1)
  (recentf-mode 1)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)

#+end_src

** font Configuration
#+begin_src emacs-lisp
  (defvar default-font-size 130)
  (set-face-attribute 'default nil :font "Fira Code" :height default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height default-font-size)
  (set-face-attribute 'variable-pitch nil :font "SF Pro Display" :height default-font-size)
#+end_src

* Package Management
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

** Evil
#+begin_src emacs-lisp
(use-package evil
  :init (evil-mode 1))
#+end_src

** Visual tweaks
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

** Completion
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-resize t
          vertico-cycle t)

    ; Persist history over Emacs restarts. Vertico sorts by history
    (use-package savehist
      :init (savehist-mode))
    )

  (use-package marginalia
    :after vertico
    :ensure t
    :init (marginalia-mode))
#+end_src


** Sly
#+begin_src emacs-lisp
(use-package sly
  :ensure t
  :init (sly-mode 1)
  :config (setq inferior-lisp-program "/usr/bin/sbcl"))
#+end_src

** Org
#+begin_src emacs-lisp
  (defun hm/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 1)
    (visual-line-mode 1)
    (setq evil-auto-indent nil
          org-startup-with-inline-images t)
    )

    (use-package org
      :hook (org-mode . hm/org-mode-setup)
      :config
      (setq org-ellipsis "  ▾"
            org-hide-emphasis-markers t
            org-edit-src-content-indentation 2
            org-startup-folded 'content))

#+end_src

*** Babel

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

**** Sly

#+begin_src emacs-lisp
  (setq org-babel-lisp-eval-fn #'sly-eval)
#+end_src

**** Enable Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (lisp . t))))
#+end_src

**** Tempo

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  )
#+end_src

**** Auto Tangle Config
#+begin_src emacs-lisp
  (defun hm/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'hm/org-babel-tangle-config)))
#+end_src


*** Beautify

#+begin_src emacs-lisp
  (defun hm/org-mode-visual-fill ()
    (setq visual-fill-column-width 90
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . hm/org-mode-visual-fill))
#+end_src

**** Bullets
#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^-\\([*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-remove-leading-stars t
          org-superstar-headline-bullets-list '("◉" "◎" "◈" "◆" "◇" "▶" "▷" )
          org-superstar-special-todo-items t))

#+end_src

**** Mixed Pitch
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    (org-mode . mixed-pitch-mode))
#+end_src


* Clean Up
#+begin_src emacs-lisp
  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (setq make-backup-files nil)
#+end_src
